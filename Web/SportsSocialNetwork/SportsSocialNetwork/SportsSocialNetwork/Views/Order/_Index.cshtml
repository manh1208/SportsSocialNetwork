@model SportsSocialNetwork.Models.ViewModels.OrderViewModel

@using (Html.BeginForm("ConfirmOrder", "Order", FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-horizontal", @id = "orderForm" }))
{
    @Html.HiddenFor(p => p.FieldId)
    <div class="summary-errors alert alert-danger alert-dismissible" style="display: none; text-align:left; padding:0px 0px 0px 10px" id="error" >
        <ul>
            <li style="display: none" id="error1">
                <span style="color:red; font-size:12px">Thời gian không hợp lệ</span>
            </li>
            <li style="display: none" id="error2">
                <span style="color:red; font-size:12px">Thời gian không nằm trong các khung giờ</span>
            </li>
            <li style="display: none" id="error3">
                <span style="color:red; font-size:12px">Thời gian này sân kín</span>
            </li>
            <li style="display: none" id="error4">
                <span style="color:red; font-size:12px">Bạn không thể đặt sân vào thời điểm này</span>
            </li>
        </ul>
</div>
    <div class="form-group">
        <label>Ngày chơi</label>
        <div class="input-group">
            <span class="input-group-addon"><i class="icon wb-calendar" aria-hidden="true"></i></span>
            @Html.TextBoxFor(p => p.CreateDate, "{0:dd-MM-yyyy}", new { @class = "form-control", @id = "playDate", @data_plugin = "datepicker", @Value = "" })
        </div>
    </div>
        <div class="form-group">
            <label>Giờ chơi</label>
            <div class="input-daterange">
                <div class="input-group">
                    <span class="input-group-addon">Từ</span>
                    @Html.TextBoxFor(p => p.StartTime, "{0:hh\\:mm}", new { @class = "timepicker form-control", @id = "startTime", @data_plugin = "clockpicker", @data_autoclose = "true", @Value = "", @Placeholder = "HH:MM" })
                </div>
                <div class="input-group">
                    <span class="input-group-addon">đến</span>
                    @Html.TextBoxFor(p => p.EndTime, "{0:hh\\:mm}", new { @class = "timepicker form-control", @id = "endTime", @data_plugin = "clockpicker", @data_autoclose = "true", @Value = "", @Placeholder = "HH:MM" })
                </div>
            </div>
        </div>
            <div class="form-group">
                <label>Ghi chú</label>
                @Html.TextAreaFor(p => p.Note, new { @class = "form-control", @id = "note", @rows = 3 })
            </div>
            <div class="form-group text-right">
                <input type="submit" value="Đặt sân" class="btn btn-primary" id="createOrder" />
            </div>
}

<script>
    

    $('#orderForm').submit(function () {
        var startTime = $("#startTime").val();
        var endTime = $("#endTime").val();
        var playDate = $("#playDate").val();

        //check if playDate is today or not
        var currentdate = new Date();
        var currentdateD = currentdate.getDate();
        var currentdateM = currentdate.getMonth() + 1;
        var currentdateY = currentdate.getFullYear();
        var currentH = parseInt(currentdate.getHours());
        var currentMi = parseInt(currentdate.getMinutes());
        var d = playDate.toString("dd/MM/yyyy");
        var tmp = d.split("/");
        var playD = tmp[0];
        var playM = tmp[1];
        var playY = tmp[2];
            
        var isTodayValid = false;
        if (currentdateD == playD && currentdateM == playM && currentdateY == playY) {
            var startTimeTmp = startTime.split(":");
            var startTimeH = (startTimeTmp[0].indexOf("0") == 0) ? parseInt(startTimeTmp[0].substring(1, 2)) : parseInt(startTimeTmp[0]);
            var startTimeMi = (startTimeTmp[1].indexOf("0") == 0) ? parseInt(startTimeTmp[1].substring(1, 2)) : parseInt(startTimeTmp[1]);
            var endTimeTmp = endTime.split(":");
            var endTimeH = (endTimeTmp[0].indexOf("0") == 0) ? parseInt(endTimeTmp[0].substring(1, 2)) : parseInt(endTimeTmp[0]);
            var endTimeMi = (endTimeTmp[1].indexOf("0") == 0) ? parseInt(endTimeTmp[1].substring(1, 2)) : parseInt(endTimeTmp[1]);
            if (startTimeH < currentH || (startTimeH == currentH && startTimeMi < currentMi) ||
                endTimeH < currentH || (endTimeH == currentH && endTimeMi < currentMi)) {
                isTodayValid = true;
            }
        }

        var error = false;
        $("#error").hide();
        $("#error1").hide();
        $("#error2").hide();
        $("#error3").hide();
        $("#error4").hide();
        var hasErrorContent = false;
        if (startTime >= endTime || startTime == null || startTime == "" || endTime == null || endTime == ""
                || playDate == "" || playDate == null) {
            error = true;
            hasErrorContent = true;
            $("#error1").show();
        }else{

            if (isTodayValid) {
                error = true;
                hasErrorContent = true;
                $("#error4").show();
            }

            $.ajax({
                type: 'POST',
                url: '@Url.Action("CheckTimeValidInTimeBlock")',
                async: false,
                data: {"fieldId" : @Model.FieldId,
                    "startTime": startTime,
                    "endTime" : endTime},
                success: function (result) {
                    if (!result.Succeed) {
                        error = true;
                        hasErrorContent = true;
                        $("#error2").show();
                    }
                },
                error: function (result) {
                    showMessage("Có lỗi xảy ra. Vui lòng thử lại sau.", "error", "OK");
                    error = true;
                },
            });

            $.ajax({
                type: 'POST',
                url: '@Url.Action("CheckOrderTimeExist")',
                async: false,
                data: {"fieldId" : @Model.FieldId,
                    "startTime": startTime,
                    "endTime" : endTime,
                    "playDate" : playDate},
                success: function (result) {
                    if (!result.Succeed) {
                        error = true;
                        hasErrorContent = true;
                        $("#error3").show();
                    }
                },
                error: function (result) {
                    showMessage("Có lỗi xảy ra. Vui lòng thử lại sau.", "error", "OK");
                    error = true;
                },
            });
        }
        

        if (error) {
            if(hasErrorContent){
                $("#error").show();
            }
            return false;
        }
    });

</script>





