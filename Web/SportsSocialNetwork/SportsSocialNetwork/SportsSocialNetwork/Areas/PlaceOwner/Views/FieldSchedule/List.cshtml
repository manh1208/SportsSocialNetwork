@using SportsSocialNetwork.Models.Enumerable;
@using SportsSocialNetwork.Models.Utilities;
@{
    ViewBag.Title = "Quản lí lịch đặt sân";
    int placeID = ViewBag.placeID;
    var days = ViewBag.Days as IEnumerable<SelectListItem>;
}
<style>
    .datepicker.datepicker-dropdown.dropdown-menu.datepicker-oritent-left.dataTable-orient-bottom {
        top: 43%;
    }

    .timepicker {
        z-index: 5000 !important;
    }

    .narrow {
        padding: 5px;
        border: 1px solid;
        width: 8em;
    }

    .breakAll {
        word-break: break-all;
    }


    dt, dd {
        font-size: 15px;
        color: #000;
    }

    dt {
        font-weight: bold;
    }

    .button {
        background-color: #008CBA; /* blue */
        border: none;
        color: white;
        padding: 15px 32px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
    }

    #sport-table {
        word-wrap: break-word;
    }

    .select2-dropdown{
        z-index:9999!important;
    }

    /*p.alignCenter {
        text-align: center;
    }*/
</style>

<div class="panel">
    <div class="panel-body">
        <div class="col-md-6">
            <h3>Danh sách các lịch đặt sân</h3>
        </div>
        <div class="col-md-6 text-right">
            <a class="btn btn-success" onclick="showCreateModal()" href="javascript:void(0)">Thêm lịch đặt sân</a>
        </div>
    </div>
</div>

<div class="panel">
    <div class="panel-body">
        <div class="box">
            <div class="box-header">
            </div><!-- /.box-header -->
            <div class="box-body">
                <div class="row">
                    <div class="col-sm-12">
                        <table id="fieldschedule-table" class="table table-hover dataTable table-bordered dt-responsive nowrap" cellspacing="0">
                            <thead>
                                <tr>
                                    <th class="breakAll narrow">Số thứ tự</th>
                                    <th class="breakAll narrow">Tên sân</th>
                                    <th class="breakAll narrow">Ngày bắt đầu</th>
                                    <th class="breakAll narrow">Ngày kết thúc</th>
                                    <th class="breakAll narrow">Loại</th>
                                    <th class="breakAll narrow">Thao tác</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>
            </div><!-- /.box-body -->
        </div>
    </div>
</div>

<div class="modal fade modal-warning" id="modelDetail" aria-hidden="true"
     aria-labelledby="modelDetail" role="dialog" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div id="detail-modal-container"></div>
        </div>
    </div>
</div>

<div class="modal fade modal-warning" id="modalCreate" aria-hidden="true"
     aria-labelledby="modalCreate" role="dialog" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div id="create-modal-container"></div>
        </div>
    </div>
</div>


<div class="modal fade modal-warning" id="modalUpdate" aria-hidden="true"
     aria-labelledby="modalViewdetail" role="dialog" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div id="update-modal-container"></div>
        </div>
    </div>
</div>


@section scripts{
    <script>
        (function (document, window, $) {
            'use strict';

            var Site = window.Site;
            $(document).ready(function () {
                Site.run();
                $('#startDay').datepicker({
                    format: "dd/mm/yyyy"
                })
                $('#endDay').datepicker({
                    format: "dd/mm/yyyy"
                })

            });
        })(document, window, jQuery);

        //load init datatable function
        $(document).ready(function () {
            initEventTable();
        });

        function switchToUpdate(id) {
            $('#modelDetail').modal('toggle');
            showUpdateModal(id);
        }

        //init datatable
        function initEventTable() {
            var colDefs = [
                  {
                      "aTargets": [1, 2, 3],
                      "bSortable": false,
                  },

                  {
                      "aTargets": [4],
                      "mRender": function (data, type, row) {
                          var label = '';
                          if (row[4] == parseInt('@((int)FieldScheduleStatus.Repair)')) {
                              label = '<span class="label label-outline label-danger label-lg">@Utils.GetEnumDescription(FieldScheduleStatus.Repair).ToString()</span>';
                          } else if (row[4] == parseInt('@((int)FieldScheduleStatus.Booked)')) {
                              label = '<span class="label label-outline label-success label-lg">@Utils.GetEnumDescription(FieldScheduleStatus.Booked)</span>';
                          } else if (row[4] == parseInt('@((int)FieldScheduleStatus.Event)')) {
                              label = '<span class="label label-outline label-success label-lg">@Utils.GetEnumDescription(FieldScheduleStatus.Event)</span>';
                          } else if (row[4] == parseInt('@((int)FieldScheduleStatus.Other)')) {
                              label = '<span class="label label-outline label-warning label-lg">@Utils.GetEnumDescription(FieldScheduleStatus.Other)</span>';
                          } else {
                              label = '<span class="label label-outline label-default label-lg">Chưa có</span>';
                          }

                          return label;
                      },
                      "bSortable": false,
                  },

                  {
                      "aTargets": [5],
                      "mRender": function (data, type, row) {
                          //var previewBtn = '<a class="btn btn-success" data-target="#modalViewdetail" onclick="showDetailModal(\'' + row[2] + '\')" data-toggle="modal" href="#"><i class="fa fa-eye"></i></a>';
                          var previewBtn = '<a class="btn btn-success" data-target="#modalViewdetail" onclick="showDetailModal(\'' + data + '\')" data-toggle="modal" href="#"><i class="fa fa-eye"></i></a>';
                          var updateBtn = '<a class="btn btn-warning" data-target="#modalUpdate" data-toggle="modal" onclick="showUpdateModal(\'' + data + '\')" href="#"><i class="fa fa-pencil-square-o"></i></a>';
                          var deactiveBtn = '<a class="btn btn-danger" data-style="zoom-in" data-plugin="ladda" onclick="deactiveSchedule(\'' + data + '\')"  href="#"> <span class="ladda-label"><i class="fa fa-trash-o "></i></span></a>';
                          return previewBtn + '&nbsp;' + updateBtn + '&nbsp;' + deactiveBtn;
                      },
                      "bSortable": false
                  },
            ];
            var param = {
                colDefs: colDefs,
                url: '@Url.Action("IndexList")',
                data: [{
                    name: "placeID", value: '@placeID'
                }]
            };
            $('#fieldschedule-table').customDataTable(param);

        };

        //show detail popup
        function showDetailModal(id) {
            $.ajax({
                url: '@Url.Action("Detail")',
                type: 'Get',
                data: { id: id },
                success: function (data) {
                    $('#detail-modal-container').html(data);
                    $('#modelDetail').modal('show');
                },
                error: function (error) {
                    showMessage("Có lỗi xảy ra. Vui lòng thử lại sau.", "error", "OK");
                }
            });
        };

        //show sport create popup
        function showCreateModal() {
            $.ajax({
                url: '@Url.Action("Create")',
                type: 'Get',
                data: { placeId: @placeID},
                //dataType: "html",
                //luc khoi tao 1 sport moi thi ko có id
                success: function (data) {
                    $('#create-modal-container').html(data);
                    $('#modalCreate').modal('show');
                    scriptForPartialView();//de thuc hien java script goi controller xu ly thao tac create
                },
                error: function (error) {
                    showMessage("Có lỗi xảy ra. Vui lòng thử lại sau.", "error", "OK");
                }
            });
        };


        //show sport update popup
        function showUpdateModal(id) {
            $.ajax({
                url: '@Url.Action("Update")',
                type: 'Get',
                data: { id: id, placeId: @placeID },
                success: function (data) {
                    $('#update-modal-container').html(data);
                    $('#modalUpdate').modal('show');
                    scriptUpdatePartial();
                },
                error: function (error) {
                    showMessage("Có lỗi xảy ra. Vui lòng thử lại sau.", "error", "OK");
                }
            });
        };

        //this function will change the status from active to deactive
        function deactiveSchedule(id) {
            showConfirmDeleteItem("Bạn có chắc chắn muốn xóa lịch đặt này không?",
                function (isConfirm) {
                    if (isConfirm) {
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("Deactive")',
                            data: { id: id },
                            success: function (data) {
                                $("#fieldschedule-table").reloadDataTable();
                                if (data.Succeed) {
                                    showMessage("Xóa thành công", "success", "OK");
                                } else {
                                    showMessage("Có lỗi xảy ra. Vui lòng thử lại sau.", "error", "OK");
                                }
                            },
                            error: function (error) {
                                showMessage("Có lỗi xảy ra. Vui lòng thử lại sau.", "error", "OK");
                            }
                        });
                    }
                });
        };


        function scriptUpdatePartial() {

            var array =  [{"id":"1","text":"Chủ Nhật"},
                           {"id":"2","text":"Thứ hai"},
           {"id":"3","text":"Thứ ba"},
           {"id":"4","text":"Thứ tư"},
           {"id":"5","text":"Thứ năm"},
           {"id":"6","text":"Thứ sáu"},
           {"id":"7","text":"Thứ bảy"},];




            $("#days").select2({
                class: 'form-control',
                width: '100%',
                multiple: true,
                maximumSelectionSize: 1,
                placeholder: "",
                data: array
            });

            $("#type").on('change', function() {


                if ($(this).val() == "2")
                {
                    $("#divUsername").show();
                }else{
                    $("#divUsername").hide();
                }
            });


            $("#username").on('blur', function() {
                var username = this.value;
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("CheckUsername")',
                    data: {username: username},
                    success: function (result) {
                        if (result.Succeed) {
                            $("#formGroupUsername").removeClass("has-error");
                            $("#formGroupUsername").addClass("has-success");
                        } else {
                            $("#formGroupUsername").removeClass("has-success");
                            $("#formGroupUsername").addClass("has-error");
                        }

                    },
                    error: function (result) {

                        showMessage("Có lỗi xảy ra. Vui lòng thử lại sau.", "error", "OK");
                    },
                });
            });



            $('#update-fieldschedule-form').submit(function (e) {



            });
            var flag = false;

            function  changeDays(){
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetDays")',
                    data: {startDate: $("#startDay").val(),
                        endDate: $("#endDay").val()},

                    success: function (result) {
                        if (result.Succeed) {
                            flag = true;
                            var arr = result.AdditionalData;
                            $('#days').select2().on('change', function() {
                                $('#days').removeClass('select2-offscreen').select2({data:arr});
                            }).trigger('change');
                        } else {

                        }

                    },
                    error: function (result) {

                        return false;
                    },
                });
            }

            $('#startDay').datepicker({
                format: "dd/mm/yyyy"
            });
            $('#endDay').datepicker({
                format: "dd/mm/yyyy"
            });

            $(document).on('change', "#startDay", function () {
                $('#update-fieldschedule-form').formValidation('revalidateField', 'StartDateStr');
                changeDays();
            });
            $(document).on('change', "#endDay", function () {
                $('#update-fieldschedule-form').formValidation('revalidateField', 'EndDateStr');
                changeDays();
            });

            $(document).on('change', "#startTime", function () {
                $('#update-fieldschedule-form').formValidation('revalidateField', 'StartTimeStr');
            });
            $(document).on('change', "#endTime", function () {
                $('#update-fieldschedule-form').formValidation('revalidateField', 'EndTimeStr');
            });

            $("#startTime").on("change", function () {
                $('#update-fieldschedule-form').formValidation('revalidateField', 'StartTimeStr')
            });

            $("#endTime").on("change", function () {
                $('#update-fieldschedule-form').formValidation('revalidateField', 'EndTimeStr')
            });

            $("#days").on("change", function () {
                if (!flag)
                    $('#update-fieldschedule-form').formValidation('revalidateField', 'Days')

                flag  =false;
            });

            var stD = $("#startDay").val();

            (function () {
                var TIME_PATTERN = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/;
                $('#update-fieldschedule-form').formValidation({
                    framework: "bootstrap",
                    button: {
                        selector: '#submitBtn',
                        disabled: 'disabled'
                    },
                    icon: null,
                    fields: {
                        StartDateStr: {
                            validators: {
                                notEmpty: {
                                    message: 'Ngày bắt đầu không được trống'
                                },
                                date: {
                                    format: 'DD/MM/YYYY',
                                    message: 'Ngày không phù hợp',
                                    min: stD,
                                    max: 'EndDateStr'
                                }
                            }
                        },
                        EndDateStr: {
                            validators: {
                                notEmpty: {
                                    message: 'Ngày kết thúc không được trống'
                                },
                                date: {
                                    format: 'DD/MM/YYYY',
                                    message: 'Ngày không phù hợp',
                                    min: 'StartDateStr'
                                }
                            }
                        },
                        StartTimeStr: {
                            validators: {
                                notEmpty: {
                                    message: 'Giờ bắt đầu không được trống'
                                },
                                regexp: {
                                    regexp: TIME_PATTERN,
                                    message: 'Giờ không đúng định dạng [HH:mm]'
                                },
                            }
                        },
                        EndTimeStr: {
                            validators: {
                                notEmpty: {
                                    message: 'Giờ bắt đầu không được trống'
                                },
                                regexp: {
                                    regexp: TIME_PATTERN,
                                    message: 'Giờ không đúng định dạng [HH:mm]'
                                },
                                callback: {
                                    message: 'Giờ kết thúc phải sau giờ bắt đầu',
                                    callback: function (value, validator, $field) {
                                        var startTime = validator.getFieldElements('StartTimeStr').val();
                                        if (startTime == '' || !TIME_PATTERN.test(startTime)) {
                                            return true;
                                        }
                                        var startHour = parseInt(startTime.split(':')[0], 10),
                                            startMinutes = parseInt(startTime.split(':')[1], 10),
                                            endHour = parseInt(value.split(':')[0], 10),
                                            endMinutes = parseInt(value.split(':')[1], 10);

                                        if (endHour > startHour || (endHour == startHour && endMinutes > startMinutes)) {
                                            // The start time is also valid
                                            // So, we need to update its status
                                            validator.updateStatus('StartTimeStr', validator.STATUS_VALID, 'callback');
                                            return true;
                                        }

                                        return false;
                                    }
                                }
                            }
                        },Days:{
                            validators: {
                                notEmpty: {
                                    message: 'Ngày lặp lại không được trống'
                                },
                            }
                        },
                        Description: {
                            validators: {
                                notEmpty: {
                                    message: 'Mô tả không được trống'
                                }
                            }
                        }
                    }
                })
                .on('success.form.fv', function(e) {
                    e.preventDefault();
                    var formData = new FormData(document.getElementById('update-fieldschedule-form'));
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("Update")',
                        data: formData,
                        async: false,
                        cache: false,
                        contentType: false,
                        processData: false,
                        success: function (result) {
                            if (result.Succeed) {
                                showMessage("Thay đổi thành công.", "success", "OK");
                                $('#modalUpdate').modal('hide');
                                $('#fieldschedule-table').reloadDataTable();
                            } else {
                                showErrors(result.Errors);
                            }

                        },
                        error: function (result) {

                            showMessage("Có lỗi xảy ra. Vui lòng thử lại sau.", "error", "OK");
                        },
                    });
                });
            })();



            $('body').on('focus', ".timepicker", function () {
                $(this).clockpicker();
            })
            $('body').on('focus', ".datepicker", function () {
                $(this).datepicker();
            })
        };
        //function nay de goi controller thuc hien cac thao tac xu ly update, create
        function scriptForPartialView() {
            (function (document, window, $) {
                'use strict';

                var Site = window.Site;
                $(document).ready(function () {
                    Site.run();


                });
            })(document, window, jQuery);

            var array =  [{"id":"1","text":"Chủ Nhật"},
                            {"id":"2","text":"Thứ hai"},
            {"id":"3","text":"Thứ ba"},
            {"id":"4","text":"Thứ tư"},
            {"id":"5","text":"Thứ năm"},
            {"id":"6","text":"Thứ sáu"},
            {"id":"7","text":"Thứ bảy"},];

            var array2 =  [{"id":"1","text":"ahihi"},
                         {"id":"2","text":"dc k nhi"},
            ];


            $("#cdays").select2({
                class: 'form-control',
                width: '100%',
                multiple: true,
                maximumSelectionSize: 1,
                placeholder: "",
                data: array
            });

            $("#cUsername").on('blur', function() {
                var username = this.value;
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("CheckUsername")',
                    data: {username: username},
                    success: function (result) {
                        if (result.Succeed) {
                            $("#cformGroupUsername").removeClass("has-error");
                            $("#cformGroupUsername").addClass("has-success");
                        } else {
                            $("#cformGroupUsername").removeClass("has-success");
                            $("#cformGroupUsername").addClass("has-error");
                        }

                    },
                    error: function (result) {

                        showMessage("Có lỗi xảy ra. Vui lòng thử lại sau.", "error", "OK");
                    }
                });
            });

            var flag = false;

            $("#cType").on('change', function() {


                if ($(this).val() == "2")
                {
                    $("#cdivUsername").show();
                }else{
                    $("#cdivUsername").hide();
                }
            });



            $('#create-fieldschedule-form').submit(function (e) {



            });

            $('#cstartDay').datepicker({
                format: "dd/mm/yyyy"
            });
            $('#cendDay').datepicker({
                format: "dd/mm/yyyy"
            });

            function  changeDays(){
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetDays")',
                    data: {startDate: $("#cstartDay").val(),
                        endDate: $("#cendDay").val()},

                    success: function (result) {
                        if (result.Succeed) {
                            flag = true;
                            var arr = result.AdditionalData;
                            $('#cdays').select2().on('change', function() {
                                $('#cdays').removeClass('select2-offscreen').select2({data:arr});
                            }).trigger('change');
                        } else {

                        }

                    },
                    error: function (result) {

                        return false;
                    },
                });
            }

            $(document).on('change', "#cstartDay", function () {
                $('#create-fieldschedule-form').formValidation('revalidateField', 'StartDateStr');
                changeDays();


            });
            $(document).on('change', "#cendDay", function () {
                $('#create-fieldschedule-form').formValidation('revalidateField', 'EndDateStr');
                changeDays();
            });

            $(document).on('change', "#cstartTime", function () {
                $('#create-fieldschedule-form').formValidation('revalidateField', 'StartTimeStr');
            });
            $(document).on('change', "#cendTime", function () {
                $('#create-fieldschedule-form').formValidation('revalidateField', 'EndTimeStr');
            });

            $("#cstartTime").on("change", function () {
                $('#create-fieldschedule-form').formValidation('revalidateField', 'StartTimeStr')
            });

            $("#cendTime").on("change", function () {
                $('#create-fieldschedule-form').formValidation('revalidateField', 'EndTimeStr')
            });

            $("#cdays").on("change", function () {
                if (!flag)
                    $('#create-fieldschedule-form').formValidation('revalidateField', 'Days')

                flag  =false;
            });


            //$("#cdays").focus(function () {
            //    $("#csubmitBtn").removeAttr("disabled")
            //})

            //Validation
            (function () {
                var TIME_PATTERN = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/;
                $('#create-fieldschedule-form').formValidation({
                    framework: "bootstrap",
                    button: {
                        selector: '#csubmitBtn',
                        disabled: 'disabled'
                    },
                    icon: null,
                    fields: {
                        FieldId: {
                            validators: {
                                notEmpty: {
                                    message: 'Tên sự kiện không được trống'
                                }
                            }
                        },
                        PlaceId: {
                            validators: {
                                notEmpty: {
                                    message: 'Địa điểm không được trống'
                                }
                            }
                        },
                        StartDateStr: {
                            validators: {
                                notEmpty: {
                                    message: 'Ngày bắt đầu không được trống'
                                },
                                date: {
                                    format: 'DD/MM/YYYY',
                                    message: 'Ngày không phù hợp',
                                    min: '@DateTime.Now.ToString("dd/MM/yyyy")',
                                    max: 'EndDateStr'
                                }
                            }
                        },
                        EndDateStr: {
                            validators: {
                                notEmpty: {
                                    message: 'Ngày kết thúc không được trống'
                                },
                                date: {
                                    format: 'DD/MM/YYYY',
                                    message: 'Ngày không phù hợp',
                                    min: 'StartDateStr'
                                }
                            }
                        },
                        StartTimeStr: {
                            validators: {
                                notEmpty: {
                                    message: 'Giờ bắt đầu không được trống'
                                },
                                regexp: {
                                    regexp: TIME_PATTERN,
                                    message: 'Giờ không đúng định dạng [HH:mm]'
                                },
                            }
                        },
                        EndTimeStr: {
                            validators: {
                                notEmpty: {
                                    message: 'Giờ kết thúc không được trống'
                                },
                                regexp: {
                                    regexp: TIME_PATTERN,
                                    message: 'Giờ không đúng định dạng [HH:mm]'
                                },
                                callback: {
                                    message: 'Giờ kết thúc phải sau giờ bắt đầu',
                                    callback: function (value, validator, $field) {
                                        var startTime = validator.getFieldElements('StartTimeStr').val();
                                        if (startTime == '' || !TIME_PATTERN.test(startTime)) {
                                            return true;
                                        }
                                        var startHour = parseInt(startTime.split(':')[0], 10),
                                            startMinutes = parseInt(startTime.split(':')[1], 10),
                                            endHour = parseInt(value.split(':')[0], 10),
                                            endMinutes = parseInt(value.split(':')[1], 10);

                                        if (endHour > startHour || (endHour == startHour && endMinutes > startMinutes)) {
                                            // The start time is also valid
                                            // So, we need to update its status
                                            validator.updateStatus('StartTimeStr', validator.STATUS_VALID, 'callback');
                                            return true;
                                        }

                                        return false;
                                    }
                                }
                            }
                        },
                        UserName:{
                            validators: {

                                callback: {
                                    message: 'Tên tài khoản không đúng',
                                    callback: function (value, validator, $field) {
                                        $.ajax({
                                            type: 'POST',
                                            url: '@Url.Action("CheckUsername")',
                                            data: {username: value},
                                            async: true,
                                            cache: false,
                                            contentType: false,
                                            processData: false,
                                            success: function (result) {
                                                if (result.Succeed) {
                                                    return true;
                                                } else {
                                                    return false;
                                                }

                                            },
                                            error: function (result) {

                                                return false;
                                            },
                                        });

                                        return true;
                                    }
                                }
                            }
                        },
                        Days:{
                            validators: {
                                notEmpty: {
                                    message: 'Ngày lặp lại không được trống'
                                },
                            }
                        },
                        Description: {
                            validators: {
                                notEmpty: {
                                    message: 'Mô tả không được trống'
                                }
                            }
                        }
                    }
                })
                .on('success.form.fv', function(e) {
                    // Prevent form submission
                    e.preventDefault();
                    var formData = new FormData(document.getElementById('create-fieldschedule-form'));
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("Create")',
                        data: formData,

                        contentType: false,
                        processData: false,
                        success: function (result) {
                            if (result.Succeed) {
                                showMessage("Tạo thành công.", "success", "OK");
                                $('#modalCreate').modal('hide');
                                $('#fieldschedule-table').reloadDataTable();
                            } else {
                                showErrors(result.Errors);
                            }

                        },
                        error: function (result) {

                            showMessage("Có lỗi xảy ra. Vui lòng thử lại sau.", "error", "OK");
                        },
                    });
                });
            })();


            $('body').on('focus', ".timepicker", function () {
                $(this).clockpicker();
            })
            $('body').on('focus', ".datepicker", function () {
                $(this).datepicker();
            })

        };

        $('body').on('focus', ".timepicker", function () {
            $(this).clockpicker();
        })
        $('body').on('focus', ".datepicker", function () {
            $(this).datepicker();
        })

        function checkDateTimeInput() {
            var fieldId = $('#fieldId option:selected').val()
            var startDay = $("#cstartDay").val();
            var endDay = $("#cendDay").val();
            var startTime = $("#cstartTime").val();
            var endTime = $("#cendTime").val();
            var isValid = false;

            $.ajax({
                type: 'POST',
                url: '@Url.Action("checkDTValid")',
                async: false,
                data: {
                    fieldId: fieldId,
                    startDay: startDay,
                    endDay: endDay,
                    startTime: startTime,
                    endTime: endTime
                },
                success: function (data) {
                    if (data === "valid") {
                        isValid = true;
                    }
                    else {

                        isValid = false;
                    }
                },
                error: function (error) {
                    showMessage("Có lỗi xảy ra. Vui lòng thử lại sau.", "error", "OK");
                }
            });

            if(isValid) {
                return true;
            }
            else
            {
                var noti = "<p class='alert alert-danger'>Khung giờ đã tồn tại</p>";
                $("#noti").empty();
                $("#noti").append(noti);
                return false;
            }
        }
    </script>
}

