@using SportsSocialNetwork.Models.Enumerable;
@using SportsSocialNetwork.Models.Utilities;
@using Microsoft.AspNet.Identity;
@using SportsSocialNetwork.Models.ViewModels;
@using SportsSocialNetwork.Models.Entities;
@{
    ViewBag.Title = "Danh sách các sự kiện";
    var sport = ViewBag.Sport as IEnumerable<SelectListItem>;
}

<style>
    .select2-selection {
        border-radius: 0px !important;
        font-weight: 400;
    }

    .select2-selection__choice {
        color: #fff !important;
        background-color: #ff6a00 !important;
        font-weight: 400;
    }

    .select2-selection__choice__remove {
        color: #fff !important;
    }
    .select2-dropdown {
        z-index: 99999;
    }
</style>

<div class="panel">
    <div class="panel-body">
        <div class="col-md-6">
            <h3>Danh sách các sự kiện</h3>
        </div>
        <div class="col-md-6 text-right">
            <a href="/PlaceOwner/Event/CreateEvent" class="btn btn-success"><i class="fa fa-plus" aria-hidden="true"></i> Tạo mới sự kiện</a>
        </div>
    </div>
</div>
<div class="panel">
    <div class="panel-body">
        <table class="table table-striped table-bordered table-hover" id="listEventTable">
            <thead>
                <tr>
                    @*<th>Số thứ tự</th>*@
                    <th>Tên sự kiện</th>
                    <th>Hình ảnh</th>
                    <th>Ngày bắt đầu</th>
                    <th>Ngày kết thúc</th>
                    <th>Trạng thái</th>
                    <th>Thao tác</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>

<div class="modal fade" id="modalEventDetail" aria-hidden="true"
     aria-labelledby="modalEventDetail" role="dialog" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div id="event-detail-modal-container"></div>
        </div>
    </div>
</div>

<div class="modal fade" id="updateEventModal" aria-hidden="true"
     aria-labelledby="updateEventModal" role="dialog" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div id="event-update-modal-container"></div>
        </div>
    </div>
</div>

<div id="shareEventModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div id="share-event-modal-container">

            </div>
        </div>
    </div>
</div>

<!--Share modal-->
<div id="shareModal" class="modal fade" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <form id="shareForm" method="post" class="form-horizontal" autocomplete="off">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Chia sẻ bài viết</h4>
                </div>
                <div class="modal-body">
                    <h3>Chia sẻ bài viết này lên: </h3>
                    <input type="hidden" name="userId" value="@User.Identity.GetUserId()" />
                    <input type="hidden" name="shareType" id="shareType" value="" />
                    <input type="hidden" name="dataId" id="dataId" value="" />
                    <input type="radio" name="receiver" id="senderWall" value="@((int)SharedReceiver.SenderWall)" checked> Tường nhà bạn<br>
                    <input type="radio" name="receiver" id="frdWall" value="@((int)SharedReceiver.FriendWall)"> Tường nhà của người mà bạn theo dõi
                    <select id="frdSelectShare" name="frdSelectShare" class="form-control" disabled>
                        <option value="-1">Chọn một bạn</option>
                        @{
                            if (ViewBag.followingList != null && ViewBag.followingList.Count > 0)
                            {
                                foreach (var item in ViewBag.followingList as List<FollowDetailViewModel>)
                                {
                                    <option value="@item.UserId">@item.User.FullName</option>
                                }
                            }

                        }
                    </select>
                    <br>
                    <input type="radio" name="receiver" id="groupWall" value="@((int)SharedReceiver.Group)"> Nhóm
                    <select id="groupSelectShare" name="groupSelectShare" class="form-control" disabled>
                        <option value="-1">Chọn một nhóm</option>
                        @{
                            if (ViewBag.GroupList != null && ViewBag.GroupList.Count > 0)
                            {
                                foreach (var item in ViewBag.GroupList as List<Group>)
                                {
                                    <option value="@item.Id">@item.Name</option>
                                }
                            }

                        }
                    </select>
                    <br />
                    <h3>Nội dung bài viết</h3>
                    <textarea name="shareContent" id="shareContent" class="form-control" placeholder="Viết gì đó cho chia sẻ này"></textarea>
                    <input id="sportSelectShare" type="text" name="sportSelectShare"
                           placeholder="Tags" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Hủy</button>
                    <input type="submit" class="btn btn-default" value="Chia sẻ" />
                </div>
            </form>
        </div>

    </div>
</div>

@section Scripts{
    <script src="~/Content/assets/js/components/asscrollable.js"></script>
    <script src="~/Content/assets/vendor/select2/select2.full.js"></script>
    <script src="~/Content/assets/js/components/material.js"></script>
    <script src="~/Content/js/post-script.js"></script>
    <script>
        var count = 1;

        (function (document, window, $) {
            'use strict';

            var Site = window.Site;
            $(document).ready(function () {
                Site.run();
            });
        })(document, window, jQuery);


        var array = @Html.Raw(Json.Encode(
                 ((IEnumerable<SelectListItem>)sport).Select(m => new
                 {
                     id = m.Value,
                     text = m.Text
                 })
                ));
        $('#sportSelectShare').select2({
            class: 'form-control',
            width: '100%',
            multiple: true,
            maximumSelectionSize: 1,
            placeholder: "Chọn môn thể thao của bài viết",
            data: array
        });

        $('body').on('focus', ".datepicker", function () {
            $(this).datepicker();
        })

        $('body').on('focus', ".asscrollable", function () {
            $(this).asScrollable();
        })

        function deleteEventModal(id) {

            showConfirmDeleteItem("Bạn có chắc chắn muốn xóa sự kiện này không?",
            function (isConfirm) {
                if (isConfirm) {
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("deleteEvent")',
                        data: { id: id },
                        success: function (data) {
                            if (data === "success") {
                                //showMessage("Xóa địa điểm thành công", "success", "OK");
                                location.href = '@Url.Action("index")'
                            }
                            else {
                                showMessage("Có lỗi xảy ra. Vui lòng thử lại sau.", "error", "OK");
                            }
                        },
                        error: function (error) {
                            showMessage("Có lỗi xảy ra. Vui lòng thử lại sau.", "error", "OK");
                        }
                    });
                }
            });
        };

        function deleteEvent(id) {
            showConfirmDeleteItem("Bạn có chắc chắn muốn xóa sự kiện này không?",
            function (isConfirm) {
                if (isConfirm) {
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("deleteEvent")',
                        data: { id: id },
                        success: function (data) {
                            if (data === "success") {
                                showMessage("Xóa địa điểm thành công", "success", "OK");
                                RefreshTable();
                            }
                            else {
                                showMessage("Có lỗi xảy ra. Vui lòng thử lại sau.", "error", "OK");
                            }
                        },
                        error: function (error) {
                            showMessage("Có lỗi xảy ra. Vui lòng thử lại sau.", "error", "OK");
                        }
                    });
                }
            });
        };

        function scriptForPartialView() {

            (function (document, window, $) {
                'use strict';

                var Site = window.Site;
                $(document).ready(function () {
                    Site.run();
                });
            })(document, window, jQuery);

            CKEDITOR.replace('Description');

            $('#startDate').datepicker({
                format: "dd/mm/yyyy"
            });
            $('#endDate').datepicker({
                format: "dd/mm/yyyy"
            });

            $(document).on('change', "#startDate", function () {
                $('#eventForm').formValidation('revalidateField', 'StartDate');
            });
            $(document).on('change', "#endDate", function () {
                $('#eventForm').formValidation('revalidateField', 'EndDate');
            });

            var std = $("#startDate").val();

            //Validation
            (function () {
                $('#eventForm').formValidation({
                    framework: "bootstrap",
                    button: {
                        selector: '#submitBtn',
                        disabled: 'disabled'
                    },
                    icon: null,
                    fields: {
                        Name: {
                            validators: {
                                notEmpty: {
                                    message: 'Tên sự kiện không được trống'
                                }
                            }
                        },
                        PlaceId: {
                            validators: {
                                notEmpty: {
                                    message: 'Địa điểm không được trống'
                                }
                            }
                        },
                        StartDate: {
                            validators: {
                                notEmpty: {
                                    message: 'Ngày bắt đầu không được trống'
                                },
                                date: {
                                    format: 'DD/MM/YYYY',
                                    message: 'Ngày không phù hợp',
                                    min: std,
                                    max: 'EndDate'
                                }
                            }
                        },
                        EndDate: {
                            validators: {
                                notEmpty: {
                                    message: 'Ngày kết thúc không được trống'
                                },
                                date: {
                                    format: 'DD/MM/YYYY',
                                    message: 'Ngày không phù hợp',
                                    min: 'StartDate'
                                }
                            }
                        },
                        //Description: {
                        //    validators: {
                        //        notEmpty: {
                        //            message: 'Mô tả không được trống'
                        //        }
                        //    }
                        //},
                        type_numberic: {
                            validators: {
                                integer: {
                                    message: 'The value is not an number'
                                }
                            }
                        },
                        type_date: {
                            validators: {
                                date: {
                                    format: 'YYYY/MM/DD'
                                }
                            }
                        }
                    }
                });
            })();

            $('#eventForm').submit(function (e) {
                e.preventDefault();

                for (instance in CKEDITOR.instances)
                    CKEDITOR.instances[instance].updateElement();
                var formData = new FormData(document.getElementById('eventForm'));
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("updateEvent")',
                    data: formData,
                    async: false,
                    cache: false,
                    contentType: false,
                    processData: false,
                    success: function (result) {
                        if (result.Succeed) {
                            showMessage("Cập nhật thành công", "success", "OK");
                            $('#updateEventModal').modal('hide');
                            RefreshTable();

                        } else {
                            showMessage("Có lỗi xảy ra. Vui lòng thử lại sau.", "error", "OK");
                        }

                    },
                    error: function (result) {
                        showMessage("Có lỗi xảy ra. Vui lòng thử lại sau.", "error", "OK");
                    },
                });


            });
        }

        function showDetail(id) {
            $.ajax({
                url: '@Url.Action("EventDetailModal")',
                type: 'Get',
                data: { id: id },
                success: function (data) {
                    $('#event-detail-modal-container').html(data);
                    $('#modalEventDetail').modal('show');
                },
                error: function (error) {
                    showMessage("Có lỗi xảy ra. Vui lòng thử lại sau.", "error", "OK");
                }
            });

        };

        function showUpdate(id) {
            $.ajax({
                url: '@Url.Action("EventDetail")',
                type: 'Get',
                data: { id: id },
                success: function (data) {
                    $('#event-update-modal-container').html(data);
                    $('#updateEventModal').modal('show');
                    scriptForPartialView();
                },
                error: function (error) {
                    showMessage("Có lỗi xảy ra. Vui lòng thử lại sau.", "error", "OK");
                }
            });
        }

        function shareEvent(id) {
            showConfirmMessage("Bạn có chắc chắn muốn chia sẻ sự kiện này không?",
            function (isConfirm) {
                if (isConfirm) {
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("shareEvent")',
                        data: { id: id },
                        success: function (data) {
                            if (data.Succeed) {
                                showMessage("Chia sẻ sự kiện thành công", "success", "OK");
                                RefreshTable();
                            }
                            else {
                                showMessage("Có lỗi xảy ra. Vui lòng thử lại sau.", "error", "OK");
                            }
                        },
                        error: function (error) {
                            showMessage("Có lỗi xảy ra. Vui lòng thử lại sau.", "error", "OK");
                        }
                    });
                }
            });
        };

        function showShareEventModal(id) {
            $.ajax({
                url: '@Url.Action("ShareEventModal")',
                type: 'Get',
                data: { id: id },
                success: function (data) {
                    $('#share-event-modal-container').html(data);
                    var array = @Html.Raw(Json.Encode(
                          ((IEnumerable<SelectListItem>)sport).Select(m => new
                          {
                              id = m.Value,
                              text = m.Text
                          })
                     ));
                    $('#eventSport').select2({
                        class: 'form-control',
                        width: '100%',
                        multiple: true,
                        maximumSelectionSize: 5,
                        placeholder: "Chọn môn thể thao cho sự kiện",
                        data: array
                    });
                    $('#shareEventModal').modal('show');

                    (function (document, window, $) {
                        'use strict';

                        var Site = window.Site;
                        $(document).ready(function () {
                            Site.run();
                        });
                    })(document, window, jQuery);

                    $('#shareEventForm').submit(function (e) {
                        e.preventDefault();
                        var formData = new FormData(document.getElementById('shareEventForm'));
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("shareEvent")',
                            data: formData,
                            async: false,
                            cache: false,
                            contentType: false,
                            processData: false,
                            success: function (result) {
                                if (result.Succeed) {
                                    showMessage("Cập nhật thành công", "success", "OK");
                                    $('#shareEventModal').modal('hide');

                                } else {
                                    showMessage("Có lỗi xảy ra. Vui lòng thử lại sau.", "error", "OK");
                                }

                            },
                            error: function (result) {
                                showMessage("Có lỗi xảy ra. Vui lòng thử lại sau.", "error", "OK");
                            },
                        });


                    });

                },
                error: function (error) {
                    showMessage("Có lỗi xảy ra. Vui lòng thử lại sau.", "error", "OK");
                }
            });

        };

        function RefreshTable() {
            count = 1;
            var oTable = $("#listEventTable").dataTable();
            oTable._fnPageChange(0);
            oTable._fnAjaxUpdate();
        };

        function switchToUpdate(id)
        {
            $('#modalEventDetail').modal('toggle');
            showUpdate(id)
        }

        function InitDatatable() {

            $("#listEventTable").DataTable({
                "bRetrieve": true,
                "bServerSide": true,
                "bScrollCollapse": true,
                "bSort": true,
                "sAjaxSource": "/PlaceOwner/Event/GetData",
                "bProcessing": true,
                "fnServerParams": function (aoData) {
                    aoData.push({ "name": "userID", "value": '@User.Identity.GetUserId()' });
                },
                "aLengthMenu": [10, 20, 50],
                "oLanguage": {
                    "sSearch": "Tìm kiếm:",
                    "sZeroRecords": "Không có dữ liệu phù hợp",
                    "sInfo": "Hiển thị từ _START_ đến _END_ trên tổng số _TOTAL_ dòng",
                    "sEmptyTable": "Không có dữ liệu",
                    "sInfoFiltered": " - lọc ra từ _MAX_ dòng",
                    "sLengthMenu": "Hiển thị _MENU_ dòng",
                    "sProcessing": "Đang xử lý...",
                    "oPaginate": {
                        "sPrevious": "Trang trước",
                        "sNext": "Trang kế"
                    }
                },

                @*"fnDrawCallback": function (settings) {
                    $(':checkbox').change(function () {
                        if ($(this).prop('checked') == true) {
                            $.ajax({
                                url: "/BlogPostManage/@ViewBag.storeId/@ViewBag.storeName/BlogPost/ChangeStatus",
                                type: 'POST',
                                data: {
                                    'blogPostId': $(this).val(),
                                    'status': 'Activate'
                                },
                                dataType: 'json',
                                success: function (result) {
                                    ReDrawDatatable("listBlogPostTable");
                                }
                            });
                        } else {
                            $.ajax({
                                url: "/BlogPostManage/@ViewBag.storeId/@ViewBag.storeName/BlogPost/ChangeStatus",
                                type: 'POST',
                                data: {
                                    'blogPostId': $(this).val(),
                                    'status': 'Deactivate'
                                },
                                dataType: 'json',
                                success: function (result) {
                                    ReDrawDatatable("listBlogPostTable");
                                }
                            });
                        }
                    });
                },*@
                "aoColumnDefs": [
                    //{
                    //    "aTargets": [0],
                    //    "mRender": function (data, type, o) {
                    //        return count++;
                    //    }
                    //},
                    {
                        "aTargets": [0],
                        "mRender": function (data, type, o) {
                            return o[1];
                        }
                    },
                    {
                        "aTargets": [1],
                        "bSortable": false,
                        "mRender": function (data, type, o) {
                            if (o[5] === '' || o[5] == "" || o[5] == null)
                            {
                                return "<img src='~/Content/images/no_image.jpg' width='100' />";
                            }
                            return "<img src='" + o[5] + "' width='100' />";
                        }
                    },
                    {
                        "aTargets": [2],
                        "mRender": function (data, type, o) {
                            var date = new Date(parseInt(o[3].substr(6)));
                            var month = parseInt(date.getMonth()) + 1;
                            var formattedDate = date.getDate() + "/" + month + "/" + date.getFullYear();
                            return "<p>" + formattedDate + "</p>";
                        }
                    },
                    {
                        "aTargets": [3],
                        "mRender": function (data, type, o) {
                            var date = new Date(parseInt(o[4].substr(6)));
                            var month = parseInt(date.getMonth()) + 1;
                            var formattedDate = date.getDate() + "/" + month + "/" + date.getFullYear();
                            return "<p>" + formattedDate + "</p>";
                        }
                    },
                    {
                        "aTargets": [4],
                        "mRender": function (data, type, o) {
                            var label = '';
                            if (o[6] == parseInt('@((int)EventStatus.Operating)')) {
                                label = "<span class='label label-lg label-outline label-success'>@Utils.GetEnumDescription(EventStatus.Operating).ToString()</span>";
                            } else if (o[6] == parseInt('@((int)EventStatus.Closed)')) {
                                label = "<span class='label label-lg label-outline label-dark'>@Utils.GetEnumDescription(EventStatus.Closed).ToString()</span>"
                            } else {
                                label = '<span class="label label-outline label-default label-lg">Không xác định</span>';
                            }
                            return label;
                        }
                    },
                    {
                        "aTargets": [5],
                        "bSortable": false,
                        "mRender": function (data, type, o) {
                            var viewDetailBtn = "<a href='javascript:void(0)' class='btn btn-success' data-target='#modalEventDetail' data-toggle='modal' onclick='showDetail(" + o[0] + ")'><i class='fa fa-eye' aria-hidden='true'></i></a>";
                            var updateBtn = "<a href='javascript:void(0)' class='btn btn-warning' id='updateBtn' data-target='#updateEventModal' data-toggle='modal' onclick='showUpdate(" + o[0] + ")'><i class='fa fa-pencil-square-o' aria-hidden='true'></i></a>";
                            var deleteBtn = "<a href='javascript:void(0)' class='btn btn-danger' onclick='deleteEvent(" + o[0] + ")'><i class='fa fa-trash-o' aria-hidden='true'></i></a>";
                            var shareBtn = "<a href='javascript:void(0)' class='btn btn-dark' onclick='showShareModal(" + o[0] + ",6)'><i class='fa fa-share-alt' aria-hidden='true'></i></a>";
                            return viewDetailBtn + '&nbsp;' + updateBtn + '&nbsp;' + shareBtn + '&nbsp;' + deleteBtn;
                        }
                    }

                ],

            });
        };

        $(document).ready(function () {
            InitDatatable();
            RefreshTable();
            //loadlist();
        });

    </script>

    }